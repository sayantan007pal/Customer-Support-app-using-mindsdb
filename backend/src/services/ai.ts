import type { QueryClassification, ResponseGeneration, KnowledgeBaseEntry } from '../types/index.js';
import { executeQuery } from '../config/database.js';

const isMockMode = process.env.MOCK_MODE === 'true';

export class AIService {
  /**
   * Classify a user query using MindsDB AI Tables
   */
  async classifyQuery(query: string): Promise<QueryClassification> {
    if (isMockMode) {
      console.log('Mock mode: Classifying query:', query);
      
      const queryLower = query.toLowerCase();
      let category = 'general';
      let intent = 'help';
      let confidence = 0.8;
      
      if (queryLower.includes('password') || queryLower.includes('login') || queryLower.includes('reset')) {
        category = 'technical';
        intent = 'password_reset';
        confidence = 0.95;
      } else if (queryLower.includes('billing') || queryLower.includes('payment') || queryLower.includes('charge')) {
        category = 'billing';
        intent = 'billing_inquiry';
        confidence = 0.90;
      } else if (queryLower.includes('hi') || queryLower.includes('hello') || queryLower.includes('hey')) {
        category = 'general';
        intent = 'greeting';
        confidence = 0.85;
      }
      
      return {
        category,
        intent,
        confidence,
        entities: []
      };
    }
    
    try {
      const sql = `
        SELECT category, intent, confidence, entities
        FROM query_classifier_model
        WHERE query = '${query.replace(/'/g, "''")}'
      `;

      const result = await executeQuery(sql);
      
      if (result.rows.length === 0) {
        // Fallback classification
        return {
          category: 'general',
          intent: 'unknown',
          confidence: 0.5,
          entities: []
        };
      }

      const row = result.rows[0];
      return {
        category: row.category || 'general',
        intent: row.intent || 'unknown',
        confidence: parseFloat(row.confidence) || 0.5,
        entities: JSON.parse(row.entities || '[]')
      };
    } catch (error) {
      console.error('Query classification failed:', error);
      // Return fallback classification
      return {
        category: 'general',
        intent: 'unknown',
        confidence: 0.3,
        entities: []
      };
    }
  }

  /**
   * Generate a response using MindsDB AI Tables
   */
  async generateResponse(
    query: string,
    knowledgeBaseResults: KnowledgeBaseEntry[],
    classification: QueryClassification
  ): Promise<ResponseGeneration> {
    if (isMockMode) {
      console.log('Mock mode: Generating response for query:', query);
      
      const queryLower = query.toLowerCase();
      let response = '';
      let confidence = 0.8;
      let reasoning = 'Generated by mock AI service';
      let requires_escalation = false;
      
      if (queryLower.includes('hi') || queryLower.includes('hello') || queryLower.includes('hey')) {
        response = "Hello! I'm here to help you with any questions or issues you might have. How can I assist you today?";
        confidence = 0.95;
      } else if (knowledgeBaseResults.length > 0) {
        // Use knowledge base information to generate response
        const kb = knowledgeBaseResults[0];
        response = `Based on our knowledge base, here's what I found: ${kb.content}`;
        confidence = 0.85;
      } else {
        response = "I understand your question, but I don't have specific information about that topic right now. Would you like me to connect you with a human agent who can better assist you?";
        confidence = 0.6;
        requires_escalation = true;
      }
      
      return {
        response,
        confidence,
        reasoning,
        requires_escalation
      };
    }
    
    try {
      // Prepare context from knowledge base results
      const context = knowledgeBaseResults
        .map(entry => `${entry.title}: ${entry.chunk_content}`)
        .join('\n\n');

      const sql = `
        SELECT response, confidence, reasoning, requires_escalation
        FROM response_generator_model
        WHERE query = '${query.replace(/'/g, "''")}'
        AND context = '${context.replace(/'/g, "''")}'
        AND category = '${classification.category}'
        AND intent = '${classification.intent}'
      `;

      const result = await executeQuery(sql);
      
      if (result.rows.length === 0) {
        // Generate fallback response
        const hasKnowledgeBase = knowledgeBaseResults.length > 0;
        const confidence = hasKnowledgeBase ? 0.7 : 0.4;
        
        let response = hasKnowledgeBase
          ? this.generateFallbackResponseWithContext(query, knowledgeBaseResults)
          : "I understand your question, but I don't have specific information about that topic. Would you like me to connect you with a human agent?";

        return {
          response,
          confidence,
          reasoning: hasKnowledgeBase 
            ? 'Generated response using knowledge base context'
            : 'No specific knowledge found, suggesting escalation',
          requires_escalation: !hasKnowledgeBase || confidence < 0.6
        };
      }

      const row = result.rows[0];
      return {
        response: row.response,
        confidence: parseFloat(row.confidence) || 0.5,
        reasoning: row.reasoning || 'AI generated response',
        requires_escalation: row.requires_escalation === 'true' || row.requires_escalation === true
      };
    } catch (error) {
      console.error('Response generation failed:', error);
      return {
        response: "I'm sorry, I'm having trouble processing your request right now. Please try again or contact our support team.",
        confidence: 0.1,
        reasoning: 'Error in response generation',
        requires_escalation: true
      };
    }
  }

  /**
   * Generate a fallback response using knowledge base context
   */
  private generateFallbackResponseWithContext(
    query: string,
    knowledgeBaseResults: KnowledgeBaseEntry[]
  ): string {
    if (knowledgeBaseResults.length === 0) {
      return "I don't have specific information about that topic.";
    }

    const topResult = knowledgeBaseResults[0];
    
    // Simple rule-based response generation
    if (query.toLowerCase().includes('how')) {
      return `Based on our documentation: ${topResult.chunk_content}`;
    } else if (query.toLowerCase().includes('what')) {
      return `Here's what I found: ${topResult.chunk_content}`;
    } else if (query.toLowerCase().includes('can i') || query.toLowerCase().includes('can you')) {
      return `According to our guidelines: ${topResult.chunk_content}`;
    } else {
      return `I found this relevant information: ${topResult.chunk_content}`;
    }
  }

  /**
   * Determine if a query requires escalation to human support
   */
  async shouldEscalate(
    query: string,
    classification: QueryClassification,
    generationResult: ResponseGeneration
  ): Promise<boolean> {
    // Escalate if:
    // 1. AI explicitly says it requires escalation
    if (generationResult.requires_escalation) return true;
    
    // 2. Low confidence in classification or generation
    if (classification.confidence < 0.6 || generationResult.confidence < 0.6) return true;
    
    // 3. Certain categories that typically need human attention
    const escalationCategories = ['billing', 'refund', 'complaint', 'legal'];
    if (escalationCategories.includes(classification.category)) return true;
    
    // 4. Query contains escalation keywords
    const escalationKeywords = [
      'speak to manager', 'human agent', 'representative', 'supervisor',
      'complaint', 'frustrated', 'angry', 'disappointed', 'lawsuit', 'legal'
    ];
    
    const queryLower = query.toLowerCase();
    if (escalationKeywords.some(keyword => queryLower.includes(keyword))) return true;
    
    return false;
  }

  /**
   * Get suggested actions based on the query and response
   */
  getSuggestedActions(
    classification: QueryClassification,
    generationResult: ResponseGeneration,
    requiresEscalation: boolean
  ): string[] {
    const actions: string[] = [];
    
    if (requiresEscalation) {
      actions.push('Contact human support');
    }
    
    switch (classification.category) {
      case 'billing':
        actions.push('View billing history', 'Download invoice');
        break;
      case 'technical':
        actions.push('Check system status', 'View troubleshooting guides');
        break;
      case 'shipping':
        actions.push('Track package', 'Update shipping address');
        break;
      case 'returns':
        actions.push('Start return process', 'Check return policy');
        break;
      default:
        actions.push('Browse help center', 'Contact support');
    }
    
    return actions;
  }
}
